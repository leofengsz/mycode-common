package com.mycom.designpatterns.factory.factorysimple;

/**
 * 构造型模式
 * 
 * 简单工厂模式-特点：
 * 定义一个类来创建其他类的实例，被创建的实例具有共同的父类。
 * 一个工厂类根据传入参数，动态决定创建指定产品类（这些产品类继承自一个父类或接口）的实例。
 * 简单工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实例。在这个模式中，工厂类是整个模式的关键所在。
 * 它包含必要的判断逻辑，能够根据外界给定的信息，决定究竟应该创建哪个具体类的对象。用户在使用时可以直接根据工厂类去创建所需的实例，
 * 而无需了解这些对象是如何创建以及如何组织的。有利于整个软件体系结构的优化。
 * 
 * 简单工厂模式-优点：
 * 1. 对于使用者而言，免除直接创建产品对象的责任，而仅仅"消费"产品。
 * 2. 实现了对责任的分割。
 * 3. 外界与具体类之间偶合性低。
 * 
 * 简单工厂模式-缺点：
 * 1. 对于产品复杂多层时，显得无能为力。
 * 2. 扩展性差。
 * 
 * 简单工厂模式-适用范围：
 * 工厂类负责创建的对象比较少，客户只知道传入了工厂类的参数，对于始何创建对象（逻辑）不关心。
 *
 */
public class Customer {

  public static void main(String[] args) {
    Factory fatory = new Factory();
    BMW bmw = fatory.createBMW(320);  
    bmw.print();
    
    bmw = fatory.createBMW(523);
    bmw.print();

  }

}
