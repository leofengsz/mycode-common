package com.mycom.designpatterns.factory.factorymethod;


/**
 * 构造型模式
 *
 * 工厂方法模式-特点：
 * 工厂方法是粒度很小的设计模式，因为模式的表现只是一个抽象的方法。提前定义用于创建对象的接口，让子类决定实例化具体的某一个类，
 * 即在工厂和产品中间增加接口，工厂不再负责产品的创建，由接口针对不同条件返回具体的类实例，由具体类实例去实现。
 * 工厂方法模式是简单工厂模式的衍生，解决了许多简单工厂模式的问题。首先完全实现‘开－闭原则’，实现了可扩展。
 * 其次实现更复杂的层次结构，可以应用于产品结果复杂的场合。工厂方法模式是对简单工厂模式进行了抽象。
 * 有一个抽象的Factory类（可以是抽象类和接口），这个类将不在负责具体的产品生产，而是只制定一些规范，
 * 具体的生产工作由其子类去完成。在这个模式中，工厂类和产品类往往可以依次对应。即一个抽象工厂对应一个抽象产品，
 * 一个具体工厂对应一个具体产品，这个具体的工厂就负责生产对应的产品
 * 
 * 工厂方法模式-优点：
 * 1. 每个具体工厂完成单一任务，代码简洁。
 * 2. 有良好的扩展性
 *
 * 工厂方法模式-缺点：
 * 1. 修改产品时，很有可能修改对应的工厂类，维护麻烦。
 *
 * 工厂方法模式-适用范围：
 * 当一个类不知道它所必须创建对象的类或一个类希望由子类来指定它所创建的对象时，
 * 当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类是代理者这一信息局部化的时候，可以使用工厂方法
 * 
 */
public class Customer {

  public static void main(String[] args) {
    FactoryBMW fty = new FactoryBMW320();
    BMW bmw = fty.createBMW();
    bmw.print();
    
    fty = new FactoryBMW523();
    bmw = fty.createBMW();
    bmw.print();
    
    

  }

}
